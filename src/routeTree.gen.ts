/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ThrowerrorIndexImport } from './routes/throwerror/index'
import { Route as TestauthIndexImport } from './routes/testauth/index'
import { Route as SummonerRegionRiotIdImport } from './routes/summoner/$region.$riotId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ThrowerrorIndexRoute = ThrowerrorIndexImport.update({
  id: '/throwerror/',
  path: '/throwerror/',
  getParentRoute: () => rootRoute,
} as any)

const TestauthIndexRoute = TestauthIndexImport.update({
  id: '/testauth/',
  path: '/testauth/',
  getParentRoute: () => rootRoute,
} as any)

const SummonerRegionRiotIdRoute = SummonerRegionRiotIdImport.update({
  id: '/summoner/$region/$riotId',
  path: '/summoner/$region/$riotId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/testauth/': {
      id: '/testauth/'
      path: '/testauth'
      fullPath: '/testauth'
      preLoaderRoute: typeof TestauthIndexImport
      parentRoute: typeof rootRoute
    }
    '/throwerror/': {
      id: '/throwerror/'
      path: '/throwerror'
      fullPath: '/throwerror'
      preLoaderRoute: typeof ThrowerrorIndexImport
      parentRoute: typeof rootRoute
    }
    '/summoner/$region/$riotId': {
      id: '/summoner/$region/$riotId'
      path: '/summoner/$region/$riotId'
      fullPath: '/summoner/$region/$riotId'
      preLoaderRoute: typeof SummonerRegionRiotIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/testauth': typeof TestauthIndexRoute
  '/throwerror': typeof ThrowerrorIndexRoute
  '/summoner/$region/$riotId': typeof SummonerRegionRiotIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/testauth': typeof TestauthIndexRoute
  '/throwerror': typeof ThrowerrorIndexRoute
  '/summoner/$region/$riotId': typeof SummonerRegionRiotIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/testauth/': typeof TestauthIndexRoute
  '/throwerror/': typeof ThrowerrorIndexRoute
  '/summoner/$region/$riotId': typeof SummonerRegionRiotIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/testauth' | '/throwerror' | '/summoner/$region/$riotId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/testauth' | '/throwerror' | '/summoner/$region/$riotId'
  id:
    | '__root__'
    | '/'
    | '/testauth/'
    | '/throwerror/'
    | '/summoner/$region/$riotId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TestauthIndexRoute: typeof TestauthIndexRoute
  ThrowerrorIndexRoute: typeof ThrowerrorIndexRoute
  SummonerRegionRiotIdRoute: typeof SummonerRegionRiotIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TestauthIndexRoute: TestauthIndexRoute,
  ThrowerrorIndexRoute: ThrowerrorIndexRoute,
  SummonerRegionRiotIdRoute: SummonerRegionRiotIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/testauth/",
        "/throwerror/",
        "/summoner/$region/$riotId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/testauth/": {
      "filePath": "testauth/index.tsx"
    },
    "/throwerror/": {
      "filePath": "throwerror/index.tsx"
    },
    "/summoner/$region/$riotId": {
      "filePath": "summoner/$region.$riotId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
